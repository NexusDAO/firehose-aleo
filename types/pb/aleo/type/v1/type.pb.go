// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.4
// source: aleo/type/v1/type.proto

package pbaleo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Authority_AuthorityType int32

const (
	Authority_beacon Authority_AuthorityType = 0
	Authority_quorum Authority_AuthorityType = 1
)

// Enum value maps for Authority_AuthorityType.
var (
	Authority_AuthorityType_name = map[int32]string{
		0: "beacon",
		1: "quorum",
	}
	Authority_AuthorityType_value = map[string]int32{
		"beacon": 0,
		"quorum": 1,
	}
)

func (x Authority_AuthorityType) Enum() *Authority_AuthorityType {
	p := new(Authority_AuthorityType)
	*p = x
	return p
}

func (x Authority_AuthorityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authority_AuthorityType) Descriptor() protoreflect.EnumDescriptor {
	return file_aleo_type_v1_type_proto_enumTypes[0].Descriptor()
}

func (Authority_AuthorityType) Type() protoreflect.EnumType {
	return &file_aleo_type_v1_type_proto_enumTypes[0]
}

func (x Authority_AuthorityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authority_AuthorityType.Descriptor instead.
func (Authority_AuthorityType) EnumDescriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 0}
}

type Transaction_Transition_InputOutputType int32

const (
	Transaction_Transition_constant        Transaction_Transition_InputOutputType = 0
	Transaction_Transition_public          Transaction_Transition_InputOutputType = 1
	Transaction_Transition_private         Transaction_Transition_InputOutputType = 2
	Transaction_Transition_record          Transaction_Transition_InputOutputType = 3
	Transaction_Transition_external_record Transaction_Transition_InputOutputType = 4
	Transaction_Transition_future          Transaction_Transition_InputOutputType = 5
)

// Enum value maps for Transaction_Transition_InputOutputType.
var (
	Transaction_Transition_InputOutputType_name = map[int32]string{
		0: "constant",
		1: "public",
		2: "private",
		3: "record",
		4: "external_record",
		5: "future",
	}
	Transaction_Transition_InputOutputType_value = map[string]int32{
		"constant":        0,
		"public":          1,
		"private":         2,
		"record":          3,
		"external_record": 4,
		"future":          5,
	}
)

func (x Transaction_Transition_InputOutputType) Enum() *Transaction_Transition_InputOutputType {
	p := new(Transaction_Transition_InputOutputType)
	*p = x
	return p
}

func (x Transaction_Transition_InputOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_Transition_InputOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_aleo_type_v1_type_proto_enumTypes[1].Descriptor()
}

func (Transaction_Transition_InputOutputType) Type() protoreflect.EnumType {
	return &file_aleo_type_v1_type_proto_enumTypes[1]
}

func (x Transaction_Transition_InputOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_Transition_InputOutputType.Descriptor instead.
func (Transaction_Transition_InputOutputType) EnumDescriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 0, 0}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash             string                           `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	PreviousHash          string                           `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	Header                *Header                          `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Authority             *Authority                       `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	Transactions          map[string]*ConfirmedTransaction `protobuf:"bytes,5,rep,name=transactions,proto3" json:"transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ratifications         *Ratifications                   `protobuf:"bytes,6,opt,name=ratifications,proto3" json:"ratifications,omitempty"`
	Solutions             *CoinbaseSolution                `protobuf:"bytes,7,opt,name=solutions,proto3" json:"solutions,omitempty"`
	AbortedTransactionIds []string                         `protobuf:"bytes,8,rep,name=aborted_transaction_ids,json=abortedTransactionIds,proto3" json:"aborted_transaction_ids,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Block) GetPreviousHash() string {
	if x != nil {
		return x.PreviousHash
	}
	return ""
}

func (x *Block) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetAuthority() *Authority {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Block) GetTransactions() map[string]*ConfirmedTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Block) GetRatifications() *Ratifications {
	if x != nil {
		return x.Ratifications
	}
	return nil
}

func (x *Block) GetSolutions() *CoinbaseSolution {
	if x != nil {
		return x.Solutions
	}
	return nil
}

func (x *Block) GetAbortedTransactionIds() []string {
	if x != nil {
		return x.AbortedTransactionIds
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousStateRoot string           `protobuf:"bytes,1,opt,name=previous_state_root,json=previousStateRoot,proto3" json:"previous_state_root,omitempty"`
	TransactionsRoot  string           `protobuf:"bytes,2,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"`
	FinalizeRoot      string           `protobuf:"bytes,3,opt,name=finalize_root,json=finalizeRoot,proto3" json:"finalize_root,omitempty"`
	RatificationsRoot string           `protobuf:"bytes,4,opt,name=ratifications_root,json=ratificationsRoot,proto3" json:"ratifications_root,omitempty"`
	SolutionsRoot     string           `protobuf:"bytes,5,opt,name=solutions_root,json=solutionsRoot,proto3" json:"solutions_root,omitempty"`
	SubdagRoot        string           `protobuf:"bytes,6,opt,name=subdag_root,json=subdagRoot,proto3" json:"subdag_root,omitempty"`
	Metadata          *Header_Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetPreviousStateRoot() string {
	if x != nil {
		return x.PreviousStateRoot
	}
	return ""
}

func (x *Header) GetTransactionsRoot() string {
	if x != nil {
		return x.TransactionsRoot
	}
	return ""
}

func (x *Header) GetFinalizeRoot() string {
	if x != nil {
		return x.FinalizeRoot
	}
	return ""
}

func (x *Header) GetRatificationsRoot() string {
	if x != nil {
		return x.RatificationsRoot
	}
	return ""
}

func (x *Header) GetSolutionsRoot() string {
	if x != nil {
		return x.SolutionsRoot
	}
	return ""
}

func (x *Header) GetSubdagRoot() string {
	if x != nil {
		return x.SubdagRoot
	}
	return ""
}

func (x *Header) GetMetadata() *Header_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Authority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Authority_AuthorityType `protobuf:"varint,1,opt,name=type,proto3,enum=sf.aleo.type.v1.Authority_AuthorityType" json:"type,omitempty"`
	// Types that are assignable to Inner:
	//	*Authority_Signature_
	//	*Authority_Subdag_
	Inner isAuthority_Inner `protobuf_oneof:"inner"`
}

func (x *Authority) Reset() {
	*x = Authority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority) ProtoMessage() {}

func (x *Authority) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority.ProtoReflect.Descriptor instead.
func (*Authority) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2}
}

func (x *Authority) GetType() Authority_AuthorityType {
	if x != nil {
		return x.Type
	}
	return Authority_beacon
}

func (m *Authority) GetInner() isAuthority_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *Authority) GetSignature() *Authority_Signature {
	if x, ok := x.GetInner().(*Authority_Signature_); ok {
		return x.Signature
	}
	return nil
}

func (x *Authority) GetSubdag() *Authority_Subdag {
	if x, ok := x.GetInner().(*Authority_Subdag_); ok {
		return x.Subdag
	}
	return nil
}

type isAuthority_Inner interface {
	isAuthority_Inner()
}

type Authority_Signature_ struct {
	Signature *Authority_Signature `protobuf:"bytes,2,opt,name=signature,proto3,oneof"`
}

type Authority_Subdag_ struct {
	Subdag *Authority_Subdag `protobuf:"bytes,3,opt,name=subdag,proto3,oneof"`
}

func (*Authority_Signature_) isAuthority_Inner() {}

func (*Authority_Subdag_) isAuthority_Inner() {}

type ConfirmedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//	*ConfirmedTransaction_AcceptedDeploy_
	//	*ConfirmedTransaction_AcceptedExecute_
	//	*ConfirmedTransaction_RejectedDeploy_
	//	*ConfirmedTransaction_RejectedExecute_
	Inner isConfirmedTransaction_Inner `protobuf_oneof:"inner"`
}

func (x *ConfirmedTransaction) Reset() {
	*x = ConfirmedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmedTransaction) ProtoMessage() {}

func (x *ConfirmedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmedTransaction.ProtoReflect.Descriptor instead.
func (*ConfirmedTransaction) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{3}
}

func (m *ConfirmedTransaction) GetInner() isConfirmedTransaction_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *ConfirmedTransaction) GetAcceptedDeploy() *ConfirmedTransaction_AcceptedDeploy {
	if x, ok := x.GetInner().(*ConfirmedTransaction_AcceptedDeploy_); ok {
		return x.AcceptedDeploy
	}
	return nil
}

func (x *ConfirmedTransaction) GetAcceptedExecute() *ConfirmedTransaction_AcceptedExecute {
	if x, ok := x.GetInner().(*ConfirmedTransaction_AcceptedExecute_); ok {
		return x.AcceptedExecute
	}
	return nil
}

func (x *ConfirmedTransaction) GetRejectedDeploy() *ConfirmedTransaction_RejectedDeploy {
	if x, ok := x.GetInner().(*ConfirmedTransaction_RejectedDeploy_); ok {
		return x.RejectedDeploy
	}
	return nil
}

func (x *ConfirmedTransaction) GetRejectedExecute() *ConfirmedTransaction_RejectedExecute {
	if x, ok := x.GetInner().(*ConfirmedTransaction_RejectedExecute_); ok {
		return x.RejectedExecute
	}
	return nil
}

type isConfirmedTransaction_Inner interface {
	isConfirmedTransaction_Inner()
}

type ConfirmedTransaction_AcceptedDeploy_ struct {
	AcceptedDeploy *ConfirmedTransaction_AcceptedDeploy `protobuf:"bytes,1,opt,name=accepted_deploy,json=acceptedDeploy,proto3,oneof"`
}

type ConfirmedTransaction_AcceptedExecute_ struct {
	AcceptedExecute *ConfirmedTransaction_AcceptedExecute `protobuf:"bytes,2,opt,name=accepted_execute,json=acceptedExecute,proto3,oneof"`
}

type ConfirmedTransaction_RejectedDeploy_ struct {
	RejectedDeploy *ConfirmedTransaction_RejectedDeploy `protobuf:"bytes,3,opt,name=rejected_deploy,json=rejectedDeploy,proto3,oneof"`
}

type ConfirmedTransaction_RejectedExecute_ struct {
	RejectedExecute *ConfirmedTransaction_RejectedExecute `protobuf:"bytes,4,opt,name=rejected_execute,json=rejectedExecute,proto3,oneof"`
}

func (*ConfirmedTransaction_AcceptedDeploy_) isConfirmedTransaction_Inner() {}

func (*ConfirmedTransaction_AcceptedExecute_) isConfirmedTransaction_Inner() {}

func (*ConfirmedTransaction_RejectedDeploy_) isConfirmedTransaction_Inner() {}

func (*ConfirmedTransaction_RejectedExecute_) isConfirmedTransaction_Inner() {}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//	*Transaction_Deploy_
	//	*Transaction_Execute_
	//	*Transaction_Fee_
	Inner isTransaction_Inner `protobuf_oneof:"inner"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4}
}

func (m *Transaction) GetInner() isTransaction_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *Transaction) GetDeploy() *Transaction_Deploy {
	if x, ok := x.GetInner().(*Transaction_Deploy_); ok {
		return x.Deploy
	}
	return nil
}

func (x *Transaction) GetExecute() *Transaction_Execute {
	if x, ok := x.GetInner().(*Transaction_Execute_); ok {
		return x.Execute
	}
	return nil
}

func (x *Transaction) GetFee() *Transaction_Fee {
	if x, ok := x.GetInner().(*Transaction_Fee_); ok {
		return x.Fee
	}
	return nil
}

type isTransaction_Inner interface {
	isTransaction_Inner()
}

type Transaction_Deploy_ struct {
	Deploy *Transaction_Deploy `protobuf:"bytes,1,opt,name=deploy,proto3,oneof"`
}

type Transaction_Execute_ struct {
	Execute *Transaction_Execute `protobuf:"bytes,2,opt,name=execute,proto3,oneof"`
}

type Transaction_Fee_ struct {
	Fee *Transaction_Fee `protobuf:"bytes,3,opt,name=fee,proto3,oneof"`
}

func (*Transaction_Deploy_) isTransaction_Inner() {}

func (*Transaction_Execute_) isTransaction_Inner() {}

func (*Transaction_Fee_) isTransaction_Inner() {}

type Ratifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ratifications map[string]*Ratify `protobuf:"bytes,1,rep,name=ratifications,proto3" json:"ratifications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Ratifications) Reset() {
	*x = Ratifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratifications) ProtoMessage() {}

func (x *Ratifications) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratifications.ProtoReflect.Descriptor instead.
func (*Ratifications) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{5}
}

func (x *Ratifications) GetRatifications() map[string]*Ratify {
	if x != nil {
		return x.Ratifications
	}
	return nil
}

type Ratify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//	*Ratify_Genesis_
	//	*Ratify_BlockReward
	//	*Ratify_PuzzleReward
	Inner isRatify_Inner `protobuf_oneof:"inner"`
}

func (x *Ratify) Reset() {
	*x = Ratify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratify) ProtoMessage() {}

func (x *Ratify) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratify.ProtoReflect.Descriptor instead.
func (*Ratify) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{6}
}

func (m *Ratify) GetInner() isRatify_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *Ratify) GetGenesis() *Ratify_Genesis {
	if x, ok := x.GetInner().(*Ratify_Genesis_); ok {
		return x.Genesis
	}
	return nil
}

func (x *Ratify) GetBlockReward() uint64 {
	if x, ok := x.GetInner().(*Ratify_BlockReward); ok {
		return x.BlockReward
	}
	return 0
}

func (x *Ratify) GetPuzzleReward() uint64 {
	if x, ok := x.GetInner().(*Ratify_PuzzleReward); ok {
		return x.PuzzleReward
	}
	return 0
}

type isRatify_Inner interface {
	isRatify_Inner()
}

type Ratify_Genesis_ struct {
	Genesis *Ratify_Genesis `protobuf:"bytes,1,opt,name=genesis,proto3,oneof"`
}

type Ratify_BlockReward struct {
	BlockReward uint64 `protobuf:"varint,2,opt,name=block_reward,json=blockReward,proto3,oneof"`
}

type Ratify_PuzzleReward struct {
	PuzzleReward uint64 `protobuf:"varint,3,opt,name=puzzle_reward,json=puzzleReward,proto3,oneof"`
}

func (*Ratify_Genesis_) isRatify_Inner() {}

func (*Ratify_BlockReward) isRatify_Inner() {}

func (*Ratify_PuzzleReward) isRatify_Inner() {}

type CoinbaseSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Solutions map[string]*CoinbaseSolution_ProverSolution `protobuf:"bytes,1,rep,name=solutions,proto3" json:"solutions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CoinbaseSolution) Reset() {
	*x = CoinbaseSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinbaseSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinbaseSolution) ProtoMessage() {}

func (x *CoinbaseSolution) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinbaseSolution.ProtoReflect.Descriptor instead.
func (*CoinbaseSolution) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{7}
}

func (x *CoinbaseSolution) GetSolutions() map[string]*CoinbaseSolution_ProverSolution {
	if x != nil {
		return x.Solutions
	}
	return nil
}

type Header_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network               uint32 `protobuf:"varint,1,opt,name=network,proto3" json:"network,omitempty"`
	Round                 uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Height                uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	CumulativeWeight      string `protobuf:"bytes,4,opt,name=cumulative_weight,json=cumulativeWeight,proto3" json:"cumulative_weight,omitempty"`
	CumulativeProofTarget string `protobuf:"bytes,5,opt,name=cumulative_proof_target,json=cumulativeProofTarget,proto3" json:"cumulative_proof_target,omitempty"`
	CoinbaseTarget        uint64 `protobuf:"varint,6,opt,name=coinbase_target,json=coinbaseTarget,proto3" json:"coinbase_target,omitempty"`
	ProofTarget           uint64 `protobuf:"varint,7,opt,name=proof_target,json=proofTarget,proto3" json:"proof_target,omitempty"`
	LastCoinbaseTarget    uint64 `protobuf:"varint,8,opt,name=last_coinbase_target,json=lastCoinbaseTarget,proto3" json:"last_coinbase_target,omitempty"`
	LastCoinbaseTimestamp int64  `protobuf:"varint,9,opt,name=last_coinbase_timestamp,json=lastCoinbaseTimestamp,proto3" json:"last_coinbase_timestamp,omitempty"`
	Timestamp             int64  `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Header_Metadata) Reset() {
	*x = Header_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header_Metadata) ProtoMessage() {}

func (x *Header_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header_Metadata.ProtoReflect.Descriptor instead.
func (*Header_Metadata) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Header_Metadata) GetNetwork() uint32 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *Header_Metadata) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Header_Metadata) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Header_Metadata) GetCumulativeWeight() string {
	if x != nil {
		return x.CumulativeWeight
	}
	return ""
}

func (x *Header_Metadata) GetCumulativeProofTarget() string {
	if x != nil {
		return x.CumulativeProofTarget
	}
	return ""
}

func (x *Header_Metadata) GetCoinbaseTarget() uint64 {
	if x != nil {
		return x.CoinbaseTarget
	}
	return 0
}

func (x *Header_Metadata) GetProofTarget() uint64 {
	if x != nil {
		return x.ProofTarget
	}
	return 0
}

func (x *Header_Metadata) GetLastCoinbaseTarget() uint64 {
	if x != nil {
		return x.LastCoinbaseTarget
	}
	return 0
}

func (x *Header_Metadata) GetLastCoinbaseTimestamp() int64 {
	if x != nil {
		return x.LastCoinbaseTimestamp
	}
	return 0
}

func (x *Header_Metadata) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Authority_Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge  *Authority_Signature_Scalar     `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Response   *Authority_Signature_Scalar     `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	ComputeKey *Authority_Signature_ComputeKey `protobuf:"bytes,3,opt,name=compute_key,json=computeKey,proto3" json:"compute_key,omitempty"`
}

func (x *Authority_Signature) Reset() {
	*x = Authority_Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority_Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority_Signature) ProtoMessage() {}

func (x *Authority_Signature) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority_Signature.ProtoReflect.Descriptor instead.
func (*Authority_Signature) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Authority_Signature) GetChallenge() *Authority_Signature_Scalar {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *Authority_Signature) GetResponse() *Authority_Signature_Scalar {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Authority_Signature) GetComputeKey() *Authority_Signature_ComputeKey {
	if x != nil {
		return x.ComputeKey
	}
	return nil
}

type Authority_BatchCertificates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchCertificates []*Authority_BatchCertificates_BatchCertificate `protobuf:"bytes,1,rep,name=batch_certificates,json=batchCertificates,proto3" json:"batch_certificates,omitempty"`
}

func (x *Authority_BatchCertificates) Reset() {
	*x = Authority_BatchCertificates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority_BatchCertificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority_BatchCertificates) ProtoMessage() {}

func (x *Authority_BatchCertificates) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority_BatchCertificates.ProtoReflect.Descriptor instead.
func (*Authority_BatchCertificates) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Authority_BatchCertificates) GetBatchCertificates() []*Authority_BatchCertificates_BatchCertificate {
	if x != nil {
		return x.BatchCertificates
	}
	return nil
}

type Authority_Subdag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subdag map[uint64]*Authority_BatchCertificates `protobuf:"bytes,1,rep,name=subdag,proto3" json:"subdag,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Authority_Subdag) Reset() {
	*x = Authority_Subdag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority_Subdag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority_Subdag) ProtoMessage() {}

func (x *Authority_Subdag) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority_Subdag.ProtoReflect.Descriptor instead.
func (*Authority_Subdag) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Authority_Subdag) GetSubdag() map[uint64]*Authority_BatchCertificates {
	if x != nil {
		return x.Subdag
	}
	return nil
}

type Authority_Signature_Scalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scalar string `protobuf:"bytes,1,opt,name=scalar,proto3" json:"scalar,omitempty"`
}

func (x *Authority_Signature_Scalar) Reset() {
	*x = Authority_Signature_Scalar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority_Signature_Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority_Signature_Scalar) ProtoMessage() {}

func (x *Authority_Signature_Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority_Signature_Scalar.ProtoReflect.Descriptor instead.
func (*Authority_Signature_Scalar) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *Authority_Signature_Scalar) GetScalar() string {
	if x != nil {
		return x.Scalar
	}
	return ""
}

type Authority_Signature_ComputeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkSig *Authority_Signature_ComputeKey_Group `protobuf:"bytes,1,opt,name=pk_sig,json=pkSig,proto3" json:"pk_sig,omitempty"`
	PrSig *Authority_Signature_ComputeKey_Group `protobuf:"bytes,2,opt,name=pr_sig,json=prSig,proto3" json:"pr_sig,omitempty"`
	SkPrf *Authority_Signature_Scalar           `protobuf:"bytes,3,opt,name=sk_prf,json=skPrf,proto3" json:"sk_prf,omitempty"`
}

func (x *Authority_Signature_ComputeKey) Reset() {
	*x = Authority_Signature_ComputeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority_Signature_ComputeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority_Signature_ComputeKey) ProtoMessage() {}

func (x *Authority_Signature_ComputeKey) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority_Signature_ComputeKey.ProtoReflect.Descriptor instead.
func (*Authority_Signature_ComputeKey) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *Authority_Signature_ComputeKey) GetPkSig() *Authority_Signature_ComputeKey_Group {
	if x != nil {
		return x.PkSig
	}
	return nil
}

func (x *Authority_Signature_ComputeKey) GetPrSig() *Authority_Signature_ComputeKey_Group {
	if x != nil {
		return x.PrSig
	}
	return nil
}

func (x *Authority_Signature_ComputeKey) GetSkPrf() *Authority_Signature_Scalar {
	if x != nil {
		return x.SkPrf
	}
	return nil
}

type Authority_Signature_ComputeKey_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *Authority_Signature_ComputeKey_Group) Reset() {
	*x = Authority_Signature_ComputeKey_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority_Signature_ComputeKey_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority_Signature_ComputeKey_Group) ProtoMessage() {}

func (x *Authority_Signature_ComputeKey_Group) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority_Signature_ComputeKey_Group.ProtoReflect.Descriptor instead.
func (*Authority_Signature_ComputeKey_Group) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 0, 1, 0}
}

func (x *Authority_Signature_ComputeKey_Group) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type Authority_BatchCertificates_BatchCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId string                                                    `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	BatchHeader   *Authority_BatchCertificates_BatchCertificate_BatchHeader `protobuf:"bytes,2,opt,name=batch_header,json=batchHeader,proto3" json:"batch_header,omitempty"`
	Signatures    map[string]int64                                          `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Authority_BatchCertificates_BatchCertificate) Reset() {
	*x = Authority_BatchCertificates_BatchCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority_BatchCertificates_BatchCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority_BatchCertificates_BatchCertificate) ProtoMessage() {}

func (x *Authority_BatchCertificates_BatchCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority_BatchCertificates_BatchCertificate.ProtoReflect.Descriptor instead.
func (*Authority_BatchCertificates_BatchCertificate) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *Authority_BatchCertificates_BatchCertificate) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *Authority_BatchCertificates_BatchCertificate) GetBatchHeader() *Authority_BatchCertificates_BatchCertificate_BatchHeader {
	if x != nil {
		return x.BatchHeader
	}
	return nil
}

func (x *Authority_BatchCertificates_BatchCertificate) GetSignatures() map[string]int64 {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type Authority_BatchCertificates_BatchCertificate_BatchHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId                string   `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Author                 string   `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Round                  uint64   `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Timestamp              int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TransmissionIds        []string `protobuf:"bytes,5,rep,name=transmission_ids,json=transmissionIds,proto3" json:"transmission_ids,omitempty"`
	PreviousCertificateIds []string `protobuf:"bytes,6,rep,name=previous_certificate_ids,json=previousCertificateIds,proto3" json:"previous_certificate_ids,omitempty"`
	Signature              string   `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) Reset() {
	*x = Authority_BatchCertificates_BatchCertificate_BatchHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authority_BatchCertificates_BatchCertificate_BatchHeader) ProtoMessage() {}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authority_BatchCertificates_BatchCertificate_BatchHeader.ProtoReflect.Descriptor instead.
func (*Authority_BatchCertificates_BatchCertificate_BatchHeader) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{2, 1, 0, 0}
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) GetTransmissionIds() []string {
	if x != nil {
		return x.TransmissionIds
	}
	return nil
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) GetPreviousCertificateIds() []string {
	if x != nil {
		return x.PreviousCertificateIds
	}
	return nil
}

func (x *Authority_BatchCertificates_BatchCertificate_BatchHeader) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type ConfirmedTransaction_AcceptedDeploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index              uint32       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	DeployTransaction  *Transaction `protobuf:"bytes,2,opt,name=deploy_transaction,json=deployTransaction,proto3" json:"deploy_transaction,omitempty"`
	FinalizeOperations []string     `protobuf:"bytes,3,rep,name=finalize_operations,json=finalizeOperations,proto3" json:"finalize_operations,omitempty"`
}

func (x *ConfirmedTransaction_AcceptedDeploy) Reset() {
	*x = ConfirmedTransaction_AcceptedDeploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmedTransaction_AcceptedDeploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmedTransaction_AcceptedDeploy) ProtoMessage() {}

func (x *ConfirmedTransaction_AcceptedDeploy) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmedTransaction_AcceptedDeploy.ProtoReflect.Descriptor instead.
func (*ConfirmedTransaction_AcceptedDeploy) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ConfirmedTransaction_AcceptedDeploy) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ConfirmedTransaction_AcceptedDeploy) GetDeployTransaction() *Transaction {
	if x != nil {
		return x.DeployTransaction
	}
	return nil
}

func (x *ConfirmedTransaction_AcceptedDeploy) GetFinalizeOperations() []string {
	if x != nil {
		return x.FinalizeOperations
	}
	return nil
}

type ConfirmedTransaction_AcceptedExecute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index              uint32       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ExecuteTransaction *Transaction `protobuf:"bytes,2,opt,name=execute_transaction,json=executeTransaction,proto3" json:"execute_transaction,omitempty"`
	FinalizeOperations []string     `protobuf:"bytes,3,rep,name=finalize_operations,json=finalizeOperations,proto3" json:"finalize_operations,omitempty"`
}

func (x *ConfirmedTransaction_AcceptedExecute) Reset() {
	*x = ConfirmedTransaction_AcceptedExecute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmedTransaction_AcceptedExecute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmedTransaction_AcceptedExecute) ProtoMessage() {}

func (x *ConfirmedTransaction_AcceptedExecute) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmedTransaction_AcceptedExecute.ProtoReflect.Descriptor instead.
func (*ConfirmedTransaction_AcceptedExecute) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ConfirmedTransaction_AcceptedExecute) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ConfirmedTransaction_AcceptedExecute) GetExecuteTransaction() *Transaction {
	if x != nil {
		return x.ExecuteTransaction
	}
	return nil
}

func (x *ConfirmedTransaction_AcceptedExecute) GetFinalizeOperations() []string {
	if x != nil {
		return x.FinalizeOperations
	}
	return nil
}

type ConfirmedTransaction_RejectedDeploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index              uint32                             `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	FeeTransaction     *Transaction                       `protobuf:"bytes,2,opt,name=fee_transaction,json=feeTransaction,proto3" json:"fee_transaction,omitempty"`
	RejectedDeployment *Transaction_DeploymentTransaction `protobuf:"bytes,3,opt,name=rejected_deployment,json=rejectedDeployment,proto3" json:"rejected_deployment,omitempty"`
	FinalizeOperations []string                           `protobuf:"bytes,4,rep,name=finalize_operations,json=finalizeOperations,proto3" json:"finalize_operations,omitempty"`
}

func (x *ConfirmedTransaction_RejectedDeploy) Reset() {
	*x = ConfirmedTransaction_RejectedDeploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmedTransaction_RejectedDeploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmedTransaction_RejectedDeploy) ProtoMessage() {}

func (x *ConfirmedTransaction_RejectedDeploy) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmedTransaction_RejectedDeploy.ProtoReflect.Descriptor instead.
func (*ConfirmedTransaction_RejectedDeploy) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{3, 2}
}

func (x *ConfirmedTransaction_RejectedDeploy) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ConfirmedTransaction_RejectedDeploy) GetFeeTransaction() *Transaction {
	if x != nil {
		return x.FeeTransaction
	}
	return nil
}

func (x *ConfirmedTransaction_RejectedDeploy) GetRejectedDeployment() *Transaction_DeploymentTransaction {
	if x != nil {
		return x.RejectedDeployment
	}
	return nil
}

func (x *ConfirmedTransaction_RejectedDeploy) GetFinalizeOperations() []string {
	if x != nil {
		return x.FinalizeOperations
	}
	return nil
}

type ConfirmedTransaction_RejectedExecute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index              uint32                            `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	FeeTransaction     *Transaction                      `protobuf:"bytes,2,opt,name=fee_transaction,json=feeTransaction,proto3" json:"fee_transaction,omitempty"`
	RejectedExecution  *Transaction_ExecutionTransaction `protobuf:"bytes,3,opt,name=rejected_execution,json=rejectedExecution,proto3" json:"rejected_execution,omitempty"`
	FinalizeOperations []string                          `protobuf:"bytes,4,rep,name=finalize_operations,json=finalizeOperations,proto3" json:"finalize_operations,omitempty"`
}

func (x *ConfirmedTransaction_RejectedExecute) Reset() {
	*x = ConfirmedTransaction_RejectedExecute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmedTransaction_RejectedExecute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmedTransaction_RejectedExecute) ProtoMessage() {}

func (x *ConfirmedTransaction_RejectedExecute) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmedTransaction_RejectedExecute.ProtoReflect.Descriptor instead.
func (*ConfirmedTransaction_RejectedExecute) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{3, 3}
}

func (x *ConfirmedTransaction_RejectedExecute) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ConfirmedTransaction_RejectedExecute) GetFeeTransaction() *Transaction {
	if x != nil {
		return x.FeeTransaction
	}
	return nil
}

func (x *ConfirmedTransaction_RejectedExecute) GetRejectedExecution() *Transaction_ExecutionTransaction {
	if x != nil {
		return x.RejectedExecution
	}
	return nil
}

func (x *ConfirmedTransaction_RejectedExecute) GetFinalizeOperations() []string {
	if x != nil {
		return x.FinalizeOperations
	}
	return nil
}

type Transaction_Transition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProgramId    *Transaction_Transition_ProgramID `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	FunctionName string                            `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Inputs       []*Transaction_Transition_Input   `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs      []*Transaction_Transition_Output  `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Tpk          string                            `protobuf:"bytes,7,opt,name=tpk,proto3" json:"tpk,omitempty"`
	Tcm          string                            `protobuf:"bytes,8,opt,name=tcm,proto3" json:"tcm,omitempty"`
}

func (x *Transaction_Transition) Reset() {
	*x = Transaction_Transition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Transition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Transition) ProtoMessage() {}

func (x *Transaction_Transition) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Transition.ProtoReflect.Descriptor instead.
func (*Transaction_Transition) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Transaction_Transition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction_Transition) GetProgramId() *Transaction_Transition_ProgramID {
	if x != nil {
		return x.ProgramId
	}
	return nil
}

func (x *Transaction_Transition) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *Transaction_Transition) GetInputs() []*Transaction_Transition_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Transaction_Transition) GetOutputs() []*Transaction_Transition_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Transaction_Transition) GetTpk() string {
	if x != nil {
		return x.Tpk
	}
	return ""
}

func (x *Transaction_Transition) GetTcm() string {
	if x != nil {
		return x.Tcm
	}
	return ""
}

type Transaction_DeploymentTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edition       uint32                                            `protobuf:"varint,1,opt,name=edition,proto3" json:"edition,omitempty"`
	Program       string                                            `protobuf:"bytes,2,opt,name=program,proto3" json:"program,omitempty"`
	VerifyingKeys []*Transaction_DeploymentTransaction_VerifyingKey `protobuf:"bytes,3,rep,name=verifying_keys,json=verifyingKeys,proto3" json:"verifying_keys,omitempty"`
}

func (x *Transaction_DeploymentTransaction) Reset() {
	*x = Transaction_DeploymentTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_DeploymentTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_DeploymentTransaction) ProtoMessage() {}

func (x *Transaction_DeploymentTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_DeploymentTransaction.ProtoReflect.Descriptor instead.
func (*Transaction_DeploymentTransaction) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Transaction_DeploymentTransaction) GetEdition() uint32 {
	if x != nil {
		return x.Edition
	}
	return 0
}

func (x *Transaction_DeploymentTransaction) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *Transaction_DeploymentTransaction) GetVerifyingKeys() []*Transaction_DeploymentTransaction_VerifyingKey {
	if x != nil {
		return x.VerifyingKeys
	}
	return nil
}

type Transaction_ExecutionTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transitions     map[string]*Transaction_Transition `protobuf:"bytes,1,rep,name=transitions,proto3" json:"transitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GlobalStateRoot string                             `protobuf:"bytes,2,opt,name=global_state_root,json=globalStateRoot,proto3" json:"global_state_root,omitempty"`
	Proof           *string                            `protobuf:"bytes,3,opt,name=proof,proto3,oneof" json:"proof,omitempty"`
}

func (x *Transaction_ExecutionTransaction) Reset() {
	*x = Transaction_ExecutionTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_ExecutionTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_ExecutionTransaction) ProtoMessage() {}

func (x *Transaction_ExecutionTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_ExecutionTransaction.ProtoReflect.Descriptor instead.
func (*Transaction_ExecutionTransaction) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Transaction_ExecutionTransaction) GetTransitions() map[string]*Transaction_Transition {
	if x != nil {
		return x.Transitions
	}
	return nil
}

func (x *Transaction_ExecutionTransaction) GetGlobalStateRoot() string {
	if x != nil {
		return x.GlobalStateRoot
	}
	return ""
}

func (x *Transaction_ExecutionTransaction) GetProof() string {
	if x != nil && x.Proof != nil {
		return *x.Proof
	}
	return ""
}

type Transaction_FeeTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transition      *Transaction_Transition `protobuf:"bytes,1,opt,name=transition,proto3" json:"transition,omitempty"`
	GlobalStateRoot string                  `protobuf:"bytes,2,opt,name=global_state_root,json=globalStateRoot,proto3" json:"global_state_root,omitempty"`
	Proof           *string                 `protobuf:"bytes,3,opt,name=proof,proto3,oneof" json:"proof,omitempty"`
}

func (x *Transaction_FeeTransaction) Reset() {
	*x = Transaction_FeeTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_FeeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_FeeTransaction) ProtoMessage() {}

func (x *Transaction_FeeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_FeeTransaction.ProtoReflect.Descriptor instead.
func (*Transaction_FeeTransaction) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Transaction_FeeTransaction) GetTransition() *Transaction_Transition {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *Transaction_FeeTransaction) GetGlobalStateRoot() string {
	if x != nil {
		return x.GlobalStateRoot
	}
	return ""
}

func (x *Transaction_FeeTransaction) GetProof() string {
	if x != nil && x.Proof != nil {
		return *x.Proof
	}
	return ""
}

type Transaction_Deploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                             `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ProgramOwner  string                             `protobuf:"bytes,2,opt,name=program_owner,json=programOwner,proto3" json:"program_owner,omitempty"`
	Deployment    *Transaction_DeploymentTransaction `protobuf:"bytes,3,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Fee           *Transaction_FeeTransaction        `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *Transaction_Deploy) Reset() {
	*x = Transaction_Deploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Deploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Deploy) ProtoMessage() {}

func (x *Transaction_Deploy) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Deploy.ProtoReflect.Descriptor instead.
func (*Transaction_Deploy) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Transaction_Deploy) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Transaction_Deploy) GetProgramOwner() string {
	if x != nil {
		return x.ProgramOwner
	}
	return ""
}

func (x *Transaction_Deploy) GetDeployment() *Transaction_DeploymentTransaction {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Transaction_Deploy) GetFee() *Transaction_FeeTransaction {
	if x != nil {
		return x.Fee
	}
	return nil
}

type Transaction_Execute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                            `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Execution     *Transaction_ExecutionTransaction `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	Fee           *Transaction_FeeTransaction       `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *Transaction_Execute) Reset() {
	*x = Transaction_Execute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Execute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Execute) ProtoMessage() {}

func (x *Transaction_Execute) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Execute.ProtoReflect.Descriptor instead.
func (*Transaction_Execute) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 5}
}

func (x *Transaction_Execute) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Transaction_Execute) GetExecution() *Transaction_ExecutionTransaction {
	if x != nil {
		return x.Execution
	}
	return nil
}

func (x *Transaction_Execute) GetFee() *Transaction_FeeTransaction {
	if x != nil {
		return x.Fee
	}
	return nil
}

type Transaction_Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                      `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Fee           *Transaction_FeeTransaction `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *Transaction_Fee) Reset() {
	*x = Transaction_Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Fee) ProtoMessage() {}

func (x *Transaction_Fee) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Fee.ProtoReflect.Descriptor instead.
func (*Transaction_Fee) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 6}
}

func (x *Transaction_Fee) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Transaction_Fee) GetFee() *Transaction_FeeTransaction {
	if x != nil {
		return x.Fee
	}
	return nil
}

type Transaction_Transition_ProgramID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Transaction_Transition_ProgramID) Reset() {
	*x = Transaction_Transition_ProgramID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Transition_ProgramID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Transition_ProgramID) ProtoMessage() {}

func (x *Transaction_Transition_ProgramID) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Transition_ProgramID.ProtoReflect.Descriptor instead.
func (*Transaction_Transition_ProgramID) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *Transaction_Transition_ProgramID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transaction_Transition_ProgramID) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type Transaction_Transition_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Transaction_Transition_InputOutputType `protobuf:"varint,1,opt,name=type,proto3,enum=sf.aleo.type.v1.Transaction_Transition_InputOutputType" json:"type,omitempty"`
	Id    string                                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value *string                                `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Transaction_Transition_Input) Reset() {
	*x = Transaction_Transition_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Transition_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Transition_Input) ProtoMessage() {}

func (x *Transaction_Transition_Input) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Transition_Input.ProtoReflect.Descriptor instead.
func (*Transaction_Transition_Input) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *Transaction_Transition_Input) GetType() Transaction_Transition_InputOutputType {
	if x != nil {
		return x.Type
	}
	return Transaction_Transition_constant
}

func (x *Transaction_Transition_Input) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction_Transition_Input) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Transaction_Transition_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     Transaction_Transition_InputOutputType `protobuf:"varint,1,opt,name=type,proto3,enum=sf.aleo.type.v1.Transaction_Transition_InputOutputType" json:"type,omitempty"`
	Id       string                                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value    *string                                `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Checksum *string                                `protobuf:"bytes,4,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
}

func (x *Transaction_Transition_Output) Reset() {
	*x = Transaction_Transition_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Transition_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Transition_Output) ProtoMessage() {}

func (x *Transaction_Transition_Output) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Transition_Output.ProtoReflect.Descriptor instead.
func (*Transaction_Transition_Output) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 0, 2}
}

func (x *Transaction_Transition_Output) GetType() Transaction_Transition_InputOutputType {
	if x != nil {
		return x.Type
	}
	return Transaction_Transition_constant
}

func (x *Transaction_Transition_Output) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transaction_Transition_Output) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Transaction_Transition_Output) GetChecksum() string {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return ""
}

type Transaction_DeploymentTransaction_VerifyingKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier   string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	VerifyingKey string `protobuf:"bytes,2,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
	Certificate  string `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *Transaction_DeploymentTransaction_VerifyingKey) Reset() {
	*x = Transaction_DeploymentTransaction_VerifyingKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_DeploymentTransaction_VerifyingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_DeploymentTransaction_VerifyingKey) ProtoMessage() {}

func (x *Transaction_DeploymentTransaction_VerifyingKey) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_DeploymentTransaction_VerifyingKey.ProtoReflect.Descriptor instead.
func (*Transaction_DeploymentTransaction_VerifyingKey) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *Transaction_DeploymentTransaction_VerifyingKey) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Transaction_DeploymentTransaction_VerifyingKey) GetVerifyingKey() string {
	if x != nil {
		return x.VerifyingKey
	}
	return ""
}

func (x *Transaction_DeploymentTransaction_VerifyingKey) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

type Ratify_Genesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartingRound  uint64                                 `protobuf:"varint,1,opt,name=starting_round,json=startingRound,proto3" json:"starting_round,omitempty"`
	Members        map[string]*Ratify_Genesis_MemberState `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalStake     uint64                                 `protobuf:"varint,3,opt,name=total_stake,json=totalStake,proto3" json:"total_stake,omitempty"`
	PublicBalances map[string]uint64                      `protobuf:"bytes,4,rep,name=public_balances,json=publicBalances,proto3" json:"public_balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Ratify_Genesis) Reset() {
	*x = Ratify_Genesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratify_Genesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratify_Genesis) ProtoMessage() {}

func (x *Ratify_Genesis) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratify_Genesis.ProtoReflect.Descriptor instead.
func (*Ratify_Genesis) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Ratify_Genesis) GetStartingRound() uint64 {
	if x != nil {
		return x.StartingRound
	}
	return 0
}

func (x *Ratify_Genesis) GetMembers() map[string]*Ratify_Genesis_MemberState {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Ratify_Genesis) GetTotalStake() uint64 {
	if x != nil {
		return x.TotalStake
	}
	return 0
}

func (x *Ratify_Genesis) GetPublicBalances() map[string]uint64 {
	if x != nil {
		return x.PublicBalances
	}
	return nil
}

type Ratify_Genesis_MemberState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stake  uint64 `protobuf:"varint,1,opt,name=stake,proto3" json:"stake,omitempty"`
	IsOpen bool   `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
}

func (x *Ratify_Genesis_MemberState) Reset() {
	*x = Ratify_Genesis_MemberState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratify_Genesis_MemberState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratify_Genesis_MemberState) ProtoMessage() {}

func (x *Ratify_Genesis_MemberState) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratify_Genesis_MemberState.ProtoReflect.Descriptor instead.
func (*Ratify_Genesis_MemberState) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *Ratify_Genesis_MemberState) GetStake() uint64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *Ratify_Genesis_MemberState) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

type CoinbaseSolution_PartialSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Nonce      uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Commitment string `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *CoinbaseSolution_PartialSolution) Reset() {
	*x = CoinbaseSolution_PartialSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinbaseSolution_PartialSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinbaseSolution_PartialSolution) ProtoMessage() {}

func (x *CoinbaseSolution_PartialSolution) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinbaseSolution_PartialSolution.ProtoReflect.Descriptor instead.
func (*CoinbaseSolution_PartialSolution) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CoinbaseSolution_PartialSolution) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CoinbaseSolution_PartialSolution) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *CoinbaseSolution_PartialSolution) GetCommitment() string {
	if x != nil {
		return x.Commitment
	}
	return ""
}

type CoinbaseSolution_ProverSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartialSolution *CoinbaseSolution_PartialSolution `protobuf:"bytes,1,opt,name=partial_solution,json=partialSolution,proto3" json:"partial_solution,omitempty"`
	Proof           []byte                            `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *CoinbaseSolution_ProverSolution) Reset() {
	*x = CoinbaseSolution_ProverSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aleo_type_v1_type_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinbaseSolution_ProverSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinbaseSolution_ProverSolution) ProtoMessage() {}

func (x *CoinbaseSolution_ProverSolution) ProtoReflect() protoreflect.Message {
	mi := &file_aleo_type_v1_type_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinbaseSolution_ProverSolution.ProtoReflect.Descriptor instead.
func (*CoinbaseSolution_ProverSolution) Descriptor() ([]byte, []int) {
	return file_aleo_type_v1_type_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CoinbaseSolution_ProverSolution) GetPartialSolution() *CoinbaseSolution_PartialSolution {
	if x != nil {
		return x.PartialSolution
	}
	return nil
}

func (x *CoinbaseSolution_ProverSolution) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

var File_aleo_type_v1_type_proto protoreflect.FileDescriptor

var file_aleo_type_v1_type_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x6c, 0x65, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xab, 0x04, 0x0a, 0x05, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x61,
	0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x1a, 0x66, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x05, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x64, 0x61, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x64, 0x61, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8b, 0x03, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xb3, 0x0d, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x64, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x61, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x64, 0x61, 0x67, 0x1a, 0xa1, 0x04, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x20, 0x0a, 0x06, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x1a, 0x8b, 0x02,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x06,
	0x70, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x70, 0x6b, 0x53, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x06, 0x70, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x05, 0x70, 0x72, 0x53, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x6b, 0x5f, 0x70,
	0x72, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x73, 0x6b, 0x50, 0x72, 0x66, 0x1a, 0x1d, 0x0a, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0xd3, 0x05, 0x0a, 0x11,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x6c, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x11, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x1a,
	0xcf, 0x04, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x0c, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0xf7, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xb8, 0x01, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x64, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x64, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x64, 0x61, 0x67, 0x2e,
	0x53, 0x75, 0x62, 0x64, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x64, 0x61, 0x67, 0x1a, 0x67, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x64, 0x61, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x71, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x84,
	0x0a, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x62, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x0f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x62, 0x0a,
	0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x4d, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x83, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x0f, 0x66,
	0x65, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x81, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x45, 0x0a, 0x0f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x12, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xae, 0x12, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x65, 0x65, 0x48, 0x00, 0x52, 0x03, 0x66, 0x65, 0x65, 0x1a, 0xb1, 0x06, 0x0a,
	0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x49, 0x44, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x70, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x70, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x63, 0x6d, 0x1a, 0x39, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x1a, 0x89, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e,
	0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xb8,
	0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65,
	0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x65, 0x0a, 0x0f, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x05,
	0x1a, 0xaa, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x66,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x75, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0xb6, 0x02,
	0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x88, 0x01, 0x01, 0x1a, 0x67, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0xaa, 0x01, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x1a, 0xe7, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x66, 0x65, 0x65, 0x1a, 0xc0, 0x01,
	0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x1a, 0x6b, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66,
	0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x66, 0x65, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x52, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x59, 0x0a, 0x12, 0x52, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x04, 0x0a,
	0x06, 0x52, 0x61, 0x74, 0x69, 0x66, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c,
	0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x75, 0x7a,
	0x7a, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x1a, 0xe1, 0x03, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x5c, 0x0a, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0b, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x1a, 0x67, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x61,
	0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xbc, 0x03,
	0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x61, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x84, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x1a, 0x6e, 0x0a, 0x0e,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x66, 0x2e, 0x61, 0x6c, 0x65, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x40, 0x5a, 0x3e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x65, 0x78, 0x75, 0x73,
	0x44, 0x41, 0x4f, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x61, 0x6c, 0x65,
	0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x6c, 0x65, 0x6f, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x61, 0x6c, 0x65, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aleo_type_v1_type_proto_rawDescOnce sync.Once
	file_aleo_type_v1_type_proto_rawDescData = file_aleo_type_v1_type_proto_rawDesc
)

func file_aleo_type_v1_type_proto_rawDescGZIP() []byte {
	file_aleo_type_v1_type_proto_rawDescOnce.Do(func() {
		file_aleo_type_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_aleo_type_v1_type_proto_rawDescData)
	})
	return file_aleo_type_v1_type_proto_rawDescData
}

var file_aleo_type_v1_type_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_aleo_type_v1_type_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_aleo_type_v1_type_proto_goTypes = []interface{}{
	(Authority_AuthorityType)(0),                // 0: sf.aleo.type.v1.Authority.AuthorityType
	(Transaction_Transition_InputOutputType)(0), // 1: sf.aleo.type.v1.Transaction.Transition.InputOutputType
	(*Block)(nil),                                // 2: sf.aleo.type.v1.Block
	(*Header)(nil),                               // 3: sf.aleo.type.v1.Header
	(*Authority)(nil),                            // 4: sf.aleo.type.v1.Authority
	(*ConfirmedTransaction)(nil),                 // 5: sf.aleo.type.v1.ConfirmedTransaction
	(*Transaction)(nil),                          // 6: sf.aleo.type.v1.Transaction
	(*Ratifications)(nil),                        // 7: sf.aleo.type.v1.Ratifications
	(*Ratify)(nil),                               // 8: sf.aleo.type.v1.Ratify
	(*CoinbaseSolution)(nil),                     // 9: sf.aleo.type.v1.CoinbaseSolution
	nil,                                          // 10: sf.aleo.type.v1.Block.TransactionsEntry
	(*Header_Metadata)(nil),                      // 11: sf.aleo.type.v1.Header.Metadata
	(*Authority_Signature)(nil),                  // 12: sf.aleo.type.v1.Authority.Signature
	(*Authority_BatchCertificates)(nil),          // 13: sf.aleo.type.v1.Authority.BatchCertificates
	(*Authority_Subdag)(nil),                     // 14: sf.aleo.type.v1.Authority.Subdag
	(*Authority_Signature_Scalar)(nil),           // 15: sf.aleo.type.v1.Authority.Signature.Scalar
	(*Authority_Signature_ComputeKey)(nil),       // 16: sf.aleo.type.v1.Authority.Signature.ComputeKey
	(*Authority_Signature_ComputeKey_Group)(nil), // 17: sf.aleo.type.v1.Authority.Signature.ComputeKey.Group
	(*Authority_BatchCertificates_BatchCertificate)(nil),             // 18: sf.aleo.type.v1.Authority.BatchCertificates.BatchCertificate
	(*Authority_BatchCertificates_BatchCertificate_BatchHeader)(nil), // 19: sf.aleo.type.v1.Authority.BatchCertificates.BatchCertificate.BatchHeader
	nil, // 20: sf.aleo.type.v1.Authority.BatchCertificates.BatchCertificate.SignaturesEntry
	nil, // 21: sf.aleo.type.v1.Authority.Subdag.SubdagEntry
	(*ConfirmedTransaction_AcceptedDeploy)(nil),            // 22: sf.aleo.type.v1.ConfirmedTransaction.AcceptedDeploy
	(*ConfirmedTransaction_AcceptedExecute)(nil),           // 23: sf.aleo.type.v1.ConfirmedTransaction.AcceptedExecute
	(*ConfirmedTransaction_RejectedDeploy)(nil),            // 24: sf.aleo.type.v1.ConfirmedTransaction.RejectedDeploy
	(*ConfirmedTransaction_RejectedExecute)(nil),           // 25: sf.aleo.type.v1.ConfirmedTransaction.RejectedExecute
	(*Transaction_Transition)(nil),                         // 26: sf.aleo.type.v1.Transaction.Transition
	(*Transaction_DeploymentTransaction)(nil),              // 27: sf.aleo.type.v1.Transaction.DeploymentTransaction
	(*Transaction_ExecutionTransaction)(nil),               // 28: sf.aleo.type.v1.Transaction.ExecutionTransaction
	(*Transaction_FeeTransaction)(nil),                     // 29: sf.aleo.type.v1.Transaction.FeeTransaction
	(*Transaction_Deploy)(nil),                             // 30: sf.aleo.type.v1.Transaction.Deploy
	(*Transaction_Execute)(nil),                            // 31: sf.aleo.type.v1.Transaction.Execute
	(*Transaction_Fee)(nil),                                // 32: sf.aleo.type.v1.Transaction.Fee
	(*Transaction_Transition_ProgramID)(nil),               // 33: sf.aleo.type.v1.Transaction.Transition.ProgramID
	(*Transaction_Transition_Input)(nil),                   // 34: sf.aleo.type.v1.Transaction.Transition.Input
	(*Transaction_Transition_Output)(nil),                  // 35: sf.aleo.type.v1.Transaction.Transition.Output
	(*Transaction_DeploymentTransaction_VerifyingKey)(nil), // 36: sf.aleo.type.v1.Transaction.DeploymentTransaction.VerifyingKey
	nil,                                      // 37: sf.aleo.type.v1.Transaction.ExecutionTransaction.TransitionsEntry
	nil,                                      // 38: sf.aleo.type.v1.Ratifications.RatificationsEntry
	(*Ratify_Genesis)(nil),                   // 39: sf.aleo.type.v1.Ratify.Genesis
	(*Ratify_Genesis_MemberState)(nil),       // 40: sf.aleo.type.v1.Ratify.Genesis.MemberState
	nil,                                      // 41: sf.aleo.type.v1.Ratify.Genesis.MembersEntry
	nil,                                      // 42: sf.aleo.type.v1.Ratify.Genesis.PublicBalancesEntry
	(*CoinbaseSolution_PartialSolution)(nil), // 43: sf.aleo.type.v1.CoinbaseSolution.PartialSolution
	(*CoinbaseSolution_ProverSolution)(nil),  // 44: sf.aleo.type.v1.CoinbaseSolution.ProverSolution
	nil,                                      // 45: sf.aleo.type.v1.CoinbaseSolution.SolutionsEntry
}
var file_aleo_type_v1_type_proto_depIdxs = []int32{
	3,  // 0: sf.aleo.type.v1.Block.header:type_name -> sf.aleo.type.v1.Header
	4,  // 1: sf.aleo.type.v1.Block.authority:type_name -> sf.aleo.type.v1.Authority
	10, // 2: sf.aleo.type.v1.Block.transactions:type_name -> sf.aleo.type.v1.Block.TransactionsEntry
	7,  // 3: sf.aleo.type.v1.Block.ratifications:type_name -> sf.aleo.type.v1.Ratifications
	9,  // 4: sf.aleo.type.v1.Block.solutions:type_name -> sf.aleo.type.v1.CoinbaseSolution
	11, // 5: sf.aleo.type.v1.Header.metadata:type_name -> sf.aleo.type.v1.Header.Metadata
	0,  // 6: sf.aleo.type.v1.Authority.type:type_name -> sf.aleo.type.v1.Authority.AuthorityType
	12, // 7: sf.aleo.type.v1.Authority.signature:type_name -> sf.aleo.type.v1.Authority.Signature
	14, // 8: sf.aleo.type.v1.Authority.subdag:type_name -> sf.aleo.type.v1.Authority.Subdag
	22, // 9: sf.aleo.type.v1.ConfirmedTransaction.accepted_deploy:type_name -> sf.aleo.type.v1.ConfirmedTransaction.AcceptedDeploy
	23, // 10: sf.aleo.type.v1.ConfirmedTransaction.accepted_execute:type_name -> sf.aleo.type.v1.ConfirmedTransaction.AcceptedExecute
	24, // 11: sf.aleo.type.v1.ConfirmedTransaction.rejected_deploy:type_name -> sf.aleo.type.v1.ConfirmedTransaction.RejectedDeploy
	25, // 12: sf.aleo.type.v1.ConfirmedTransaction.rejected_execute:type_name -> sf.aleo.type.v1.ConfirmedTransaction.RejectedExecute
	30, // 13: sf.aleo.type.v1.Transaction.deploy:type_name -> sf.aleo.type.v1.Transaction.Deploy
	31, // 14: sf.aleo.type.v1.Transaction.execute:type_name -> sf.aleo.type.v1.Transaction.Execute
	32, // 15: sf.aleo.type.v1.Transaction.fee:type_name -> sf.aleo.type.v1.Transaction.Fee
	38, // 16: sf.aleo.type.v1.Ratifications.ratifications:type_name -> sf.aleo.type.v1.Ratifications.RatificationsEntry
	39, // 17: sf.aleo.type.v1.Ratify.genesis:type_name -> sf.aleo.type.v1.Ratify.Genesis
	45, // 18: sf.aleo.type.v1.CoinbaseSolution.solutions:type_name -> sf.aleo.type.v1.CoinbaseSolution.SolutionsEntry
	5,  // 19: sf.aleo.type.v1.Block.TransactionsEntry.value:type_name -> sf.aleo.type.v1.ConfirmedTransaction
	15, // 20: sf.aleo.type.v1.Authority.Signature.challenge:type_name -> sf.aleo.type.v1.Authority.Signature.Scalar
	15, // 21: sf.aleo.type.v1.Authority.Signature.response:type_name -> sf.aleo.type.v1.Authority.Signature.Scalar
	16, // 22: sf.aleo.type.v1.Authority.Signature.compute_key:type_name -> sf.aleo.type.v1.Authority.Signature.ComputeKey
	18, // 23: sf.aleo.type.v1.Authority.BatchCertificates.batch_certificates:type_name -> sf.aleo.type.v1.Authority.BatchCertificates.BatchCertificate
	21, // 24: sf.aleo.type.v1.Authority.Subdag.subdag:type_name -> sf.aleo.type.v1.Authority.Subdag.SubdagEntry
	17, // 25: sf.aleo.type.v1.Authority.Signature.ComputeKey.pk_sig:type_name -> sf.aleo.type.v1.Authority.Signature.ComputeKey.Group
	17, // 26: sf.aleo.type.v1.Authority.Signature.ComputeKey.pr_sig:type_name -> sf.aleo.type.v1.Authority.Signature.ComputeKey.Group
	15, // 27: sf.aleo.type.v1.Authority.Signature.ComputeKey.sk_prf:type_name -> sf.aleo.type.v1.Authority.Signature.Scalar
	19, // 28: sf.aleo.type.v1.Authority.BatchCertificates.BatchCertificate.batch_header:type_name -> sf.aleo.type.v1.Authority.BatchCertificates.BatchCertificate.BatchHeader
	20, // 29: sf.aleo.type.v1.Authority.BatchCertificates.BatchCertificate.signatures:type_name -> sf.aleo.type.v1.Authority.BatchCertificates.BatchCertificate.SignaturesEntry
	13, // 30: sf.aleo.type.v1.Authority.Subdag.SubdagEntry.value:type_name -> sf.aleo.type.v1.Authority.BatchCertificates
	6,  // 31: sf.aleo.type.v1.ConfirmedTransaction.AcceptedDeploy.deploy_transaction:type_name -> sf.aleo.type.v1.Transaction
	6,  // 32: sf.aleo.type.v1.ConfirmedTransaction.AcceptedExecute.execute_transaction:type_name -> sf.aleo.type.v1.Transaction
	6,  // 33: sf.aleo.type.v1.ConfirmedTransaction.RejectedDeploy.fee_transaction:type_name -> sf.aleo.type.v1.Transaction
	27, // 34: sf.aleo.type.v1.ConfirmedTransaction.RejectedDeploy.rejected_deployment:type_name -> sf.aleo.type.v1.Transaction.DeploymentTransaction
	6,  // 35: sf.aleo.type.v1.ConfirmedTransaction.RejectedExecute.fee_transaction:type_name -> sf.aleo.type.v1.Transaction
	28, // 36: sf.aleo.type.v1.ConfirmedTransaction.RejectedExecute.rejected_execution:type_name -> sf.aleo.type.v1.Transaction.ExecutionTransaction
	33, // 37: sf.aleo.type.v1.Transaction.Transition.program_id:type_name -> sf.aleo.type.v1.Transaction.Transition.ProgramID
	34, // 38: sf.aleo.type.v1.Transaction.Transition.inputs:type_name -> sf.aleo.type.v1.Transaction.Transition.Input
	35, // 39: sf.aleo.type.v1.Transaction.Transition.outputs:type_name -> sf.aleo.type.v1.Transaction.Transition.Output
	36, // 40: sf.aleo.type.v1.Transaction.DeploymentTransaction.verifying_keys:type_name -> sf.aleo.type.v1.Transaction.DeploymentTransaction.VerifyingKey
	37, // 41: sf.aleo.type.v1.Transaction.ExecutionTransaction.transitions:type_name -> sf.aleo.type.v1.Transaction.ExecutionTransaction.TransitionsEntry
	26, // 42: sf.aleo.type.v1.Transaction.FeeTransaction.transition:type_name -> sf.aleo.type.v1.Transaction.Transition
	27, // 43: sf.aleo.type.v1.Transaction.Deploy.deployment:type_name -> sf.aleo.type.v1.Transaction.DeploymentTransaction
	29, // 44: sf.aleo.type.v1.Transaction.Deploy.fee:type_name -> sf.aleo.type.v1.Transaction.FeeTransaction
	28, // 45: sf.aleo.type.v1.Transaction.Execute.execution:type_name -> sf.aleo.type.v1.Transaction.ExecutionTransaction
	29, // 46: sf.aleo.type.v1.Transaction.Execute.fee:type_name -> sf.aleo.type.v1.Transaction.FeeTransaction
	29, // 47: sf.aleo.type.v1.Transaction.Fee.fee:type_name -> sf.aleo.type.v1.Transaction.FeeTransaction
	1,  // 48: sf.aleo.type.v1.Transaction.Transition.Input.type:type_name -> sf.aleo.type.v1.Transaction.Transition.InputOutputType
	1,  // 49: sf.aleo.type.v1.Transaction.Transition.Output.type:type_name -> sf.aleo.type.v1.Transaction.Transition.InputOutputType
	26, // 50: sf.aleo.type.v1.Transaction.ExecutionTransaction.TransitionsEntry.value:type_name -> sf.aleo.type.v1.Transaction.Transition
	8,  // 51: sf.aleo.type.v1.Ratifications.RatificationsEntry.value:type_name -> sf.aleo.type.v1.Ratify
	41, // 52: sf.aleo.type.v1.Ratify.Genesis.members:type_name -> sf.aleo.type.v1.Ratify.Genesis.MembersEntry
	42, // 53: sf.aleo.type.v1.Ratify.Genesis.public_balances:type_name -> sf.aleo.type.v1.Ratify.Genesis.PublicBalancesEntry
	40, // 54: sf.aleo.type.v1.Ratify.Genesis.MembersEntry.value:type_name -> sf.aleo.type.v1.Ratify.Genesis.MemberState
	43, // 55: sf.aleo.type.v1.CoinbaseSolution.ProverSolution.partial_solution:type_name -> sf.aleo.type.v1.CoinbaseSolution.PartialSolution
	44, // 56: sf.aleo.type.v1.CoinbaseSolution.SolutionsEntry.value:type_name -> sf.aleo.type.v1.CoinbaseSolution.ProverSolution
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_aleo_type_v1_type_proto_init() }
func file_aleo_type_v1_type_proto_init() {
	if File_aleo_type_v1_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aleo_type_v1_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinbaseSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority_Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority_BatchCertificates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority_Subdag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority_Signature_Scalar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority_Signature_ComputeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority_Signature_ComputeKey_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority_BatchCertificates_BatchCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authority_BatchCertificates_BatchCertificate_BatchHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmedTransaction_AcceptedDeploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmedTransaction_AcceptedExecute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmedTransaction_RejectedDeploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmedTransaction_RejectedExecute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Transition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_DeploymentTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_ExecutionTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_FeeTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Deploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Execute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Transition_ProgramID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Transition_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Transition_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_DeploymentTransaction_VerifyingKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratify_Genesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratify_Genesis_MemberState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinbaseSolution_PartialSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aleo_type_v1_type_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinbaseSolution_ProverSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aleo_type_v1_type_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Authority_Signature_)(nil),
		(*Authority_Subdag_)(nil),
	}
	file_aleo_type_v1_type_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ConfirmedTransaction_AcceptedDeploy_)(nil),
		(*ConfirmedTransaction_AcceptedExecute_)(nil),
		(*ConfirmedTransaction_RejectedDeploy_)(nil),
		(*ConfirmedTransaction_RejectedExecute_)(nil),
	}
	file_aleo_type_v1_type_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Transaction_Deploy_)(nil),
		(*Transaction_Execute_)(nil),
		(*Transaction_Fee_)(nil),
	}
	file_aleo_type_v1_type_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Ratify_Genesis_)(nil),
		(*Ratify_BlockReward)(nil),
		(*Ratify_PuzzleReward)(nil),
	}
	file_aleo_type_v1_type_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_aleo_type_v1_type_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_aleo_type_v1_type_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_aleo_type_v1_type_proto_msgTypes[33].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aleo_type_v1_type_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aleo_type_v1_type_proto_goTypes,
		DependencyIndexes: file_aleo_type_v1_type_proto_depIdxs,
		EnumInfos:         file_aleo_type_v1_type_proto_enumTypes,
		MessageInfos:      file_aleo_type_v1_type_proto_msgTypes,
	}.Build()
	File_aleo_type_v1_type_proto = out.File
	file_aleo_type_v1_type_proto_rawDesc = nil
	file_aleo_type_v1_type_proto_goTypes = nil
	file_aleo_type_v1_type_proto_depIdxs = nil
}
